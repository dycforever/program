// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages/mesg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesg {

namespace {

const ::google::protobuf::Descriptor* HeaderMesg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeaderMesg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecHeaderMesg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecHeaderMesg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProgHeaderMesg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProgHeaderMesg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2fmesg_2eproto() {
  protobuf_AddDesc_messages_2fmesg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages/mesg.proto");
  GOOGLE_CHECK(file != NULL);
  HeaderMesg_descriptor_ = file->message_type(0);
  static const int HeaderMesg_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, phoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, shoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, ehsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, phentsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, phnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, shentsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, shnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, shstrndx_),
  };
  HeaderMesg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeaderMesg_descriptor_,
      HeaderMesg::default_instance_,
      HeaderMesg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMesg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeaderMesg));
  SecHeaderMesg_descriptor_ = file->message_type(1);
  static const int SecHeaderMesg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, addralign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, entsize_),
  };
  SecHeaderMesg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecHeaderMesg_descriptor_,
      SecHeaderMesg::default_instance_,
      SecHeaderMesg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecHeaderMesg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecHeaderMesg));
  ProgHeaderMesg_descriptor_ = file->message_type(2);
  static const int ProgHeaderMesg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgHeaderMesg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgHeaderMesg, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgHeaderMesg, vaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgHeaderMesg, paddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgHeaderMesg, filesz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgHeaderMesg, memsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgHeaderMesg, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgHeaderMesg, align_),
  };
  ProgHeaderMesg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProgHeaderMesg_descriptor_,
      ProgHeaderMesg::default_instance_,
      ProgHeaderMesg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgHeaderMesg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgHeaderMesg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProgHeaderMesg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2fmesg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeaderMesg_descriptor_, &HeaderMesg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecHeaderMesg_descriptor_, &SecHeaderMesg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProgHeaderMesg_descriptor_, &ProgHeaderMesg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2fmesg_2eproto() {
  delete HeaderMesg::default_instance_;
  delete HeaderMesg_reflection_;
  delete SecHeaderMesg::default_instance_;
  delete SecHeaderMesg_reflection_;
  delete ProgHeaderMesg::default_instance_;
  delete ProgHeaderMesg_reflection_;
}

void protobuf_AddDesc_messages_2fmesg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023messages/mesg.proto\022\004mesg\"\336\001\n\nHeaderMe"
    "sg\022\014\n\004type\030\001 \002(\004\022\017\n\007machine\030\002 \002(\004\022\017\n\007ver"
    "sion\030\003 \002(\004\022\r\n\005entry\030\004 \002(\004\022\r\n\005phoff\030\005 \002(\004"
    "\022\r\n\005shoff\030\006 \002(\004\022\r\n\005flags\030\007 \002(\004\022\016\n\006ehsize"
    "\030\010 \002(\004\022\021\n\tphentsize\030\t \002(\004\022\r\n\005phnum\030\n \002(\004"
    "\022\021\n\tshentsize\030\013 \002(\004\022\r\n\005shnum\030\014 \002(\004\022\020\n\010sh"
    "strndx\030\r \002(\004\"\246\001\n\rSecHeaderMesg\022\014\n\004name\030\001"
    " \002(\004\022\014\n\004type\030\002 \002(\004\022\r\n\005flags\030\003 \002(\004\022\014\n\004add"
    "r\030\004 \002(\004\022\016\n\006offset\030\005 \002(\004\022\014\n\004size\030\006 \002(\004\022\014\n"
    "\004link\030\007 \002(\004\022\014\n\004info\030\010 \002(\004\022\021\n\taddralign\030\t"
    " \002(\004\022\017\n\007entsize\030\n \002(\004\"\211\001\n\016ProgHeaderMesg"
    "\022\014\n\004type\030\001 \002(\004\022\016\n\006offset\030\002 \002(\004\022\r\n\005vaddr\030"
    "\003 \002(\004\022\r\n\005paddr\030\004 \002(\004\022\016\n\006filesz\030\005 \002(\004\022\r\n\005"
    "memsz\030\006 \002(\004\022\r\n\005flags\030\007 \002(\004\022\r\n\005align\030\010 \002("
    "\004", 561);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages/mesg.proto", &protobuf_RegisterTypes);
  HeaderMesg::default_instance_ = new HeaderMesg();
  SecHeaderMesg::default_instance_ = new SecHeaderMesg();
  ProgHeaderMesg::default_instance_ = new ProgHeaderMesg();
  HeaderMesg::default_instance_->InitAsDefaultInstance();
  SecHeaderMesg::default_instance_->InitAsDefaultInstance();
  ProgHeaderMesg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2fmesg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2fmesg_2eproto {
  StaticDescriptorInitializer_messages_2fmesg_2eproto() {
    protobuf_AddDesc_messages_2fmesg_2eproto();
  }
} static_descriptor_initializer_messages_2fmesg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int HeaderMesg::kTypeFieldNumber;
const int HeaderMesg::kMachineFieldNumber;
const int HeaderMesg::kVersionFieldNumber;
const int HeaderMesg::kEntryFieldNumber;
const int HeaderMesg::kPhoffFieldNumber;
const int HeaderMesg::kShoffFieldNumber;
const int HeaderMesg::kFlagsFieldNumber;
const int HeaderMesg::kEhsizeFieldNumber;
const int HeaderMesg::kPhentsizeFieldNumber;
const int HeaderMesg::kPhnumFieldNumber;
const int HeaderMesg::kShentsizeFieldNumber;
const int HeaderMesg::kShnumFieldNumber;
const int HeaderMesg::kShstrndxFieldNumber;
#endif  // !_MSC_VER

HeaderMesg::HeaderMesg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeaderMesg::InitAsDefaultInstance() {
}

HeaderMesg::HeaderMesg(const HeaderMesg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeaderMesg::SharedCtor() {
  _cached_size_ = 0;
  type_ = GOOGLE_ULONGLONG(0);
  machine_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  entry_ = GOOGLE_ULONGLONG(0);
  phoff_ = GOOGLE_ULONGLONG(0);
  shoff_ = GOOGLE_ULONGLONG(0);
  flags_ = GOOGLE_ULONGLONG(0);
  ehsize_ = GOOGLE_ULONGLONG(0);
  phentsize_ = GOOGLE_ULONGLONG(0);
  phnum_ = GOOGLE_ULONGLONG(0);
  shentsize_ = GOOGLE_ULONGLONG(0);
  shnum_ = GOOGLE_ULONGLONG(0);
  shstrndx_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeaderMesg::~HeaderMesg() {
  SharedDtor();
}

void HeaderMesg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeaderMesg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderMesg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeaderMesg_descriptor_;
}

const HeaderMesg& HeaderMesg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2fmesg_2eproto();  return *default_instance_;
}

HeaderMesg* HeaderMesg::default_instance_ = NULL;

HeaderMesg* HeaderMesg::New() const {
  return new HeaderMesg;
}

void HeaderMesg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = GOOGLE_ULONGLONG(0);
    machine_ = GOOGLE_ULONGLONG(0);
    version_ = GOOGLE_ULONGLONG(0);
    entry_ = GOOGLE_ULONGLONG(0);
    phoff_ = GOOGLE_ULONGLONG(0);
    shoff_ = GOOGLE_ULONGLONG(0);
    flags_ = GOOGLE_ULONGLONG(0);
    ehsize_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    phentsize_ = GOOGLE_ULONGLONG(0);
    phnum_ = GOOGLE_ULONGLONG(0);
    shentsize_ = GOOGLE_ULONGLONG(0);
    shnum_ = GOOGLE_ULONGLONG(0);
    shstrndx_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeaderMesg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_machine;
        break;
      }
      
      // required uint64 machine = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_machine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &machine_)));
          set_has_machine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }
      
      // required uint64 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_entry;
        break;
      }
      
      // required uint64 entry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entry_)));
          set_has_entry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_phoff;
        break;
      }
      
      // required uint64 phoff = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phoff_)));
          set_has_phoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_shoff;
        break;
      }
      
      // required uint64 shoff = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shoff_)));
          set_has_shoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }
      
      // required uint64 flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ehsize;
        break;
      }
      
      // required uint64 ehsize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ehsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ehsize_)));
          set_has_ehsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_phentsize;
        break;
      }
      
      // required uint64 phentsize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phentsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phentsize_)));
          set_has_phentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_phnum;
        break;
      }
      
      // required uint64 phnum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phnum_)));
          set_has_phnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_shentsize;
        break;
      }
      
      // required uint64 shentsize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shentsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shentsize_)));
          set_has_shentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_shnum;
        break;
      }
      
      // required uint64 shnum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shnum_)));
          set_has_shnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_shstrndx;
        break;
      }
      
      // required uint64 shstrndx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shstrndx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shstrndx_)));
          set_has_shstrndx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeaderMesg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }
  
  // required uint64 machine = 2;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->machine(), output);
  }
  
  // required uint64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }
  
  // required uint64 entry = 4;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->entry(), output);
  }
  
  // required uint64 phoff = 5;
  if (has_phoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->phoff(), output);
  }
  
  // required uint64 shoff = 6;
  if (has_shoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->shoff(), output);
  }
  
  // required uint64 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->flags(), output);
  }
  
  // required uint64 ehsize = 8;
  if (has_ehsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ehsize(), output);
  }
  
  // required uint64 phentsize = 9;
  if (has_phentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->phentsize(), output);
  }
  
  // required uint64 phnum = 10;
  if (has_phnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->phnum(), output);
  }
  
  // required uint64 shentsize = 11;
  if (has_shentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->shentsize(), output);
  }
  
  // required uint64 shnum = 12;
  if (has_shnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->shnum(), output);
  }
  
  // required uint64 shstrndx = 13;
  if (has_shstrndx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->shstrndx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeaderMesg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->type(), target);
  }
  
  // required uint64 machine = 2;
  if (has_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->machine(), target);
  }
  
  // required uint64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }
  
  // required uint64 entry = 4;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->entry(), target);
  }
  
  // required uint64 phoff = 5;
  if (has_phoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->phoff(), target);
  }
  
  // required uint64 shoff = 6;
  if (has_shoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->shoff(), target);
  }
  
  // required uint64 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->flags(), target);
  }
  
  // required uint64 ehsize = 8;
  if (has_ehsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ehsize(), target);
  }
  
  // required uint64 phentsize = 9;
  if (has_phentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->phentsize(), target);
  }
  
  // required uint64 phnum = 10;
  if (has_phnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->phnum(), target);
  }
  
  // required uint64 shentsize = 11;
  if (has_shentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->shentsize(), target);
  }
  
  // required uint64 shnum = 12;
  if (has_shnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->shnum(), target);
  }
  
  // required uint64 shstrndx = 13;
  if (has_shstrndx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->shstrndx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeaderMesg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->type());
    }
    
    // required uint64 machine = 2;
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->machine());
    }
    
    // required uint64 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }
    
    // required uint64 entry = 4;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entry());
    }
    
    // required uint64 phoff = 5;
    if (has_phoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phoff());
    }
    
    // required uint64 shoff = 6;
    if (has_shoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shoff());
    }
    
    // required uint64 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flags());
    }
    
    // required uint64 ehsize = 8;
    if (has_ehsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ehsize());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 phentsize = 9;
    if (has_phentsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phentsize());
    }
    
    // required uint64 phnum = 10;
    if (has_phnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phnum());
    }
    
    // required uint64 shentsize = 11;
    if (has_shentsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shentsize());
    }
    
    // required uint64 shnum = 12;
    if (has_shnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shnum());
    }
    
    // required uint64 shstrndx = 13;
    if (has_shstrndx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shstrndx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderMesg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeaderMesg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeaderMesg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeaderMesg::MergeFrom(const HeaderMesg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_machine()) {
      set_machine(from.machine());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_entry()) {
      set_entry(from.entry());
    }
    if (from.has_phoff()) {
      set_phoff(from.phoff());
    }
    if (from.has_shoff()) {
      set_shoff(from.shoff());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_ehsize()) {
      set_ehsize(from.ehsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phentsize()) {
      set_phentsize(from.phentsize());
    }
    if (from.has_phnum()) {
      set_phnum(from.phnum());
    }
    if (from.has_shentsize()) {
      set_shentsize(from.shentsize());
    }
    if (from.has_shnum()) {
      set_shnum(from.shnum());
    }
    if (from.has_shstrndx()) {
      set_shstrndx(from.shstrndx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeaderMesg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderMesg::CopyFrom(const HeaderMesg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderMesg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  
  return true;
}

void HeaderMesg::Swap(HeaderMesg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(machine_, other->machine_);
    std::swap(version_, other->version_);
    std::swap(entry_, other->entry_);
    std::swap(phoff_, other->phoff_);
    std::swap(shoff_, other->shoff_);
    std::swap(flags_, other->flags_);
    std::swap(ehsize_, other->ehsize_);
    std::swap(phentsize_, other->phentsize_);
    std::swap(phnum_, other->phnum_);
    std::swap(shentsize_, other->shentsize_);
    std::swap(shnum_, other->shnum_);
    std::swap(shstrndx_, other->shstrndx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeaderMesg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeaderMesg_descriptor_;
  metadata.reflection = HeaderMesg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecHeaderMesg::kNameFieldNumber;
const int SecHeaderMesg::kTypeFieldNumber;
const int SecHeaderMesg::kFlagsFieldNumber;
const int SecHeaderMesg::kAddrFieldNumber;
const int SecHeaderMesg::kOffsetFieldNumber;
const int SecHeaderMesg::kSizeFieldNumber;
const int SecHeaderMesg::kLinkFieldNumber;
const int SecHeaderMesg::kInfoFieldNumber;
const int SecHeaderMesg::kAddralignFieldNumber;
const int SecHeaderMesg::kEntsizeFieldNumber;
#endif  // !_MSC_VER

SecHeaderMesg::SecHeaderMesg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecHeaderMesg::InitAsDefaultInstance() {
}

SecHeaderMesg::SecHeaderMesg(const SecHeaderMesg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecHeaderMesg::SharedCtor() {
  _cached_size_ = 0;
  name_ = GOOGLE_ULONGLONG(0);
  type_ = GOOGLE_ULONGLONG(0);
  flags_ = GOOGLE_ULONGLONG(0);
  addr_ = GOOGLE_ULONGLONG(0);
  offset_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  link_ = GOOGLE_ULONGLONG(0);
  info_ = GOOGLE_ULONGLONG(0);
  addralign_ = GOOGLE_ULONGLONG(0);
  entsize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecHeaderMesg::~SecHeaderMesg() {
  SharedDtor();
}

void SecHeaderMesg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecHeaderMesg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecHeaderMesg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecHeaderMesg_descriptor_;
}

const SecHeaderMesg& SecHeaderMesg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2fmesg_2eproto();  return *default_instance_;
}

SecHeaderMesg* SecHeaderMesg::default_instance_ = NULL;

SecHeaderMesg* SecHeaderMesg::New() const {
  return new SecHeaderMesg;
}

void SecHeaderMesg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_ = GOOGLE_ULONGLONG(0);
    type_ = GOOGLE_ULONGLONG(0);
    flags_ = GOOGLE_ULONGLONG(0);
    addr_ = GOOGLE_ULONGLONG(0);
    offset_ = GOOGLE_ULONGLONG(0);
    size_ = GOOGLE_ULONGLONG(0);
    link_ = GOOGLE_ULONGLONG(0);
    info_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    addralign_ = GOOGLE_ULONGLONG(0);
    entsize_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecHeaderMesg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint64 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }
      
      // required uint64 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addr;
        break;
      }
      
      // required uint64 addr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }
      
      // required uint64 offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_size;
        break;
      }
      
      // required uint64 size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_link;
        break;
      }
      
      // required uint64 link = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &link_)));
          set_has_link();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_info;
        break;
      }
      
      // required uint64 info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &info_)));
          set_has_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_addralign;
        break;
      }
      
      // required uint64 addralign = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addralign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addralign_)));
          set_has_addralign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_entsize;
        break;
      }
      
      // required uint64 entsize = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entsize_)));
          set_has_entsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecHeaderMesg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->name(), output);
  }
  
  // required uint64 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->type(), output);
  }
  
  // required uint64 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->flags(), output);
  }
  
  // required uint64 addr = 4;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->addr(), output);
  }
  
  // required uint64 offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->offset(), output);
  }
  
  // required uint64 size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->size(), output);
  }
  
  // required uint64 link = 7;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->link(), output);
  }
  
  // required uint64 info = 8;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->info(), output);
  }
  
  // required uint64 addralign = 9;
  if (has_addralign()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->addralign(), output);
  }
  
  // required uint64 entsize = 10;
  if (has_entsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->entsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecHeaderMesg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->name(), target);
  }
  
  // required uint64 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->type(), target);
  }
  
  // required uint64 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->flags(), target);
  }
  
  // required uint64 addr = 4;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->addr(), target);
  }
  
  // required uint64 offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->offset(), target);
  }
  
  // required uint64 size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->size(), target);
  }
  
  // required uint64 link = 7;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->link(), target);
  }
  
  // required uint64 info = 8;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->info(), target);
  }
  
  // required uint64 addralign = 9;
  if (has_addralign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->addralign(), target);
  }
  
  // required uint64 entsize = 10;
  if (has_entsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->entsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecHeaderMesg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->name());
    }
    
    // required uint64 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->type());
    }
    
    // required uint64 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flags());
    }
    
    // required uint64 addr = 4;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addr());
    }
    
    // required uint64 offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }
    
    // required uint64 size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // required uint64 link = 7;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->link());
    }
    
    // required uint64 info = 8;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->info());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 addralign = 9;
    if (has_addralign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addralign());
    }
    
    // required uint64 entsize = 10;
    if (has_entsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entsize());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecHeaderMesg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecHeaderMesg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecHeaderMesg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecHeaderMesg::MergeFrom(const SecHeaderMesg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_link()) {
      set_link(from.link());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_addralign()) {
      set_addralign(from.addralign());
    }
    if (from.has_entsize()) {
      set_entsize(from.entsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecHeaderMesg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecHeaderMesg::CopyFrom(const SecHeaderMesg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecHeaderMesg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void SecHeaderMesg::Swap(SecHeaderMesg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(flags_, other->flags_);
    std::swap(addr_, other->addr_);
    std::swap(offset_, other->offset_);
    std::swap(size_, other->size_);
    std::swap(link_, other->link_);
    std::swap(info_, other->info_);
    std::swap(addralign_, other->addralign_);
    std::swap(entsize_, other->entsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecHeaderMesg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecHeaderMesg_descriptor_;
  metadata.reflection = SecHeaderMesg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProgHeaderMesg::kTypeFieldNumber;
const int ProgHeaderMesg::kOffsetFieldNumber;
const int ProgHeaderMesg::kVaddrFieldNumber;
const int ProgHeaderMesg::kPaddrFieldNumber;
const int ProgHeaderMesg::kFileszFieldNumber;
const int ProgHeaderMesg::kMemszFieldNumber;
const int ProgHeaderMesg::kFlagsFieldNumber;
const int ProgHeaderMesg::kAlignFieldNumber;
#endif  // !_MSC_VER

ProgHeaderMesg::ProgHeaderMesg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProgHeaderMesg::InitAsDefaultInstance() {
}

ProgHeaderMesg::ProgHeaderMesg(const ProgHeaderMesg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProgHeaderMesg::SharedCtor() {
  _cached_size_ = 0;
  type_ = GOOGLE_ULONGLONG(0);
  offset_ = GOOGLE_ULONGLONG(0);
  vaddr_ = GOOGLE_ULONGLONG(0);
  paddr_ = GOOGLE_ULONGLONG(0);
  filesz_ = GOOGLE_ULONGLONG(0);
  memsz_ = GOOGLE_ULONGLONG(0);
  flags_ = GOOGLE_ULONGLONG(0);
  align_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgHeaderMesg::~ProgHeaderMesg() {
  SharedDtor();
}

void ProgHeaderMesg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProgHeaderMesg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProgHeaderMesg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgHeaderMesg_descriptor_;
}

const ProgHeaderMesg& ProgHeaderMesg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2fmesg_2eproto();  return *default_instance_;
}

ProgHeaderMesg* ProgHeaderMesg::default_instance_ = NULL;

ProgHeaderMesg* ProgHeaderMesg::New() const {
  return new ProgHeaderMesg;
}

void ProgHeaderMesg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = GOOGLE_ULONGLONG(0);
    offset_ = GOOGLE_ULONGLONG(0);
    vaddr_ = GOOGLE_ULONGLONG(0);
    paddr_ = GOOGLE_ULONGLONG(0);
    filesz_ = GOOGLE_ULONGLONG(0);
    memsz_ = GOOGLE_ULONGLONG(0);
    flags_ = GOOGLE_ULONGLONG(0);
    align_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProgHeaderMesg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }
      
      // required uint64 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vaddr;
        break;
      }
      
      // required uint64 vaddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vaddr_)));
          set_has_vaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_paddr;
        break;
      }
      
      // required uint64 paddr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &paddr_)));
          set_has_paddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filesz;
        break;
      }
      
      // required uint64 filesz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filesz_)));
          set_has_filesz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_memsz;
        break;
      }
      
      // required uint64 memsz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memsz_)));
          set_has_memsz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }
      
      // required uint64 flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_align;
        break;
      }
      
      // required uint64 align = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_align:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &align_)));
          set_has_align();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProgHeaderMesg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }
  
  // required uint64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }
  
  // required uint64 vaddr = 3;
  if (has_vaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->vaddr(), output);
  }
  
  // required uint64 paddr = 4;
  if (has_paddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->paddr(), output);
  }
  
  // required uint64 filesz = 5;
  if (has_filesz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->filesz(), output);
  }
  
  // required uint64 memsz = 6;
  if (has_memsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->memsz(), output);
  }
  
  // required uint64 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->flags(), output);
  }
  
  // required uint64 align = 8;
  if (has_align()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->align(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProgHeaderMesg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->type(), target);
  }
  
  // required uint64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->offset(), target);
  }
  
  // required uint64 vaddr = 3;
  if (has_vaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->vaddr(), target);
  }
  
  // required uint64 paddr = 4;
  if (has_paddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->paddr(), target);
  }
  
  // required uint64 filesz = 5;
  if (has_filesz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->filesz(), target);
  }
  
  // required uint64 memsz = 6;
  if (has_memsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->memsz(), target);
  }
  
  // required uint64 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->flags(), target);
  }
  
  // required uint64 align = 8;
  if (has_align()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->align(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProgHeaderMesg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->type());
    }
    
    // required uint64 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }
    
    // required uint64 vaddr = 3;
    if (has_vaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vaddr());
    }
    
    // required uint64 paddr = 4;
    if (has_paddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->paddr());
    }
    
    // required uint64 filesz = 5;
    if (has_filesz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filesz());
    }
    
    // required uint64 memsz = 6;
    if (has_memsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memsz());
    }
    
    // required uint64 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flags());
    }
    
    // required uint64 align = 8;
    if (has_align()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->align());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgHeaderMesg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProgHeaderMesg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProgHeaderMesg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProgHeaderMesg::MergeFrom(const ProgHeaderMesg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_vaddr()) {
      set_vaddr(from.vaddr());
    }
    if (from.has_paddr()) {
      set_paddr(from.paddr());
    }
    if (from.has_filesz()) {
      set_filesz(from.filesz());
    }
    if (from.has_memsz()) {
      set_memsz(from.memsz());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_align()) {
      set_align(from.align());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProgHeaderMesg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgHeaderMesg::CopyFrom(const ProgHeaderMesg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgHeaderMesg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void ProgHeaderMesg::Swap(ProgHeaderMesg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(offset_, other->offset_);
    std::swap(vaddr_, other->vaddr_);
    std::swap(paddr_, other->paddr_);
    std::swap(filesz_, other->filesz_);
    std::swap(memsz_, other->memsz_);
    std::swap(flags_, other->flags_);
    std::swap(align_, other->align_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProgHeaderMesg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProgHeaderMesg_descriptor_;
  metadata.reflection = ProgHeaderMesg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mesg

// @@protoc_insertion_point(global_scope)
